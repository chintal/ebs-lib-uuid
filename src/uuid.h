/* 
 *   Copyright (c)
 *     (c) 2015-2016 Chintalagiri Shashank, Quazar Technologies Pvt. Ltd.
 *   
 *   This file is part of
 *   Embedded bootstraps : uuid library
 *   
 *   This library is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published
 *   by the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *   
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *   
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 */

/**
 * @file uuid.h
 * @brief Public include header for the UUID generation library.
 * 
 * This library provides UUID generation functions, to generate UUIDs 
 * compliant with RFC4122. Only versions 3, and 5 are presently supported.
 * 
 * Version 1 : Date-time and MAC address (deferred, see below)
 * Version 2 : DCE security              (no support planned)
 * Version 3 : MD5 Hash and Namespace
 * Version 4 : Random                    (deferred)
 * Version 5 : SHA1 Hash and Namespace
 * 
 * Note that the bulk of this library is NOT re-entrant. It is the 
 * application's responsibility to ensure that a uuid generation function 
 * is not called while a previous one is still in process.
 * 
 * Support for versions 3 and 5
 * ----------------------------
 * 
 * For version 3 and 5 UUID generation, the namespace should be a UUID in of 
 * itself, and can either be generated using one of the functions here or 
 * pre-installed into a UUID type variable. MD5 and SHA1 hashes are generated 
 * using the EBS repackaged version of AVR Crypto Lib. cryptolib is also a 
 * hard-dependency of this library. Note that due to the dependency on 
 * cryptolib, which is in turn a derivative AVR Crypto Lib, this library is 
 * necessarily licensed under the GPLv3 without any linking exceptions. 
 * Applications using this library must also, consequently, be distributed 
 * under the terms of the GPLv3 license.
 * 
 * @see <https://github.com/chintal/cryptolib>
 * 
 * 
 * Support for version 1 (future)
 * ------------------------------
 * 
 * Date-time is utilized from the EBS time library, which is a hard-dependency 
 * and must be included in the application. If version 1 UUIDs are not to be 
 * used, you must still include the time library but can leave it uninitialized.
 * The compiler / linker should take care of stripping it out of the output. 
 * If you do intend to use version 1 UUIDs, though, you should ensure that the
 * time library is initialized, the systick timer is installed and started, and
 * time is synchronized to real time - either from an RTC or by the Host before
 * the v1 UUID is generated. This library does nothing to make sure that the 
 * used system time makes any kind of sense. 
 * 
 * Clock sequence is not directly generated by this implementation, and must 
 * be provided by the host as part of or immediately after the clock 
 * synchronization cycle. 
 * 
 * @see <https://github.com/chintal/ebs-lib-time>
 * 
 * The MAC address used is platfom (and application) dependent. The application
 * must set a pointer to a variable that contains it's MAC address. Again, this 
 * information should be in place before an attempt to generate a version 1 
 * UUID is made.
 * 
 * The most portable approach would have been to let the application specify 
 * the MAC address format information, i.e., whether it's an ASCII string or 
 * binary sequence, and number of bytes if it is a binary sequence. 
 * 
 * However, from the EBS architecture standpoint, variants in MAC address 
 * formats are a looming issue. In fact, the rationale for creating this UUID 
 * library is to convert the various types of MAC addresses into a single, 
 * unified format. As such, this implementation expects the provided MAC 
 * address to also be a UUID. These MAC address UUIDs are to be generated 
 * during compile time by the host or during run-time initialization on the 
 * device itself, by the application / HAL, using version 5 UUIDs and the 
 * most reliable unique identifier available on that platform.
 * 
 * 
 * Support for version 4 (future)
 * ------------------------------
 * 
 * Acquiring entropy for random number generation is to be worked out. Once
 * entropy is available, either the simple LFSR implementation of the EBS 
 * prbs library or the more complex (and resource intensive) entropium CSPRNG 
 * of AVR crypto lib can be used to generate the random numbers for UUID 
 * generation. 
 * 
 * @see <https://github.com/chintal/ebs-lib-prbs>
 * 
 * @see uuid.h
 * @see <https://en.wikipedia.org/wiki/Universally_unique_identifier>
 * @see <https://tools.ietf.org/html/rfc4122>
 */

#ifndef UUID_H
#define UUID_H

#include<stdint.h>

typedef union UUID_t{
    uint8_t b[16];
    struct UUID_STRUCTURE{
        uint32_t time_low;
        uint16_t time_mid;
        uint16_t time_hi_and_version;
        uint8_t  clk_seq_hi_res;
        uint8_t  clk_seq_low;
        uint16_t node_low;
        uint32_t node_high;
    }structure;
}uuid_t;

#define UUID_SUPPORT_v1     0
#define UUID_SUPPORT_v2     0
#define UUID_SUPPORT_v3     1
#define UUID_SUPPORT_v4     0
#define UUID_SUPPORT_v5     1


uint16_t uuid_init(uint16_t ucdm_next_address);

void uuid_clear(uuid_t * out);

#if UUID_SUPPORT_v1
    extern uuid_t mac_uuid;
    void uuid1(uuid_t * out);
#endif

#if UUID_SUPPORT_v3
    void uuid3(uuid_t * out, uuid_t * ns, uint8_t * name_p, uint8_t len);
#endif

#if UUID_SUPPORT_v4    
    void uuid4(uuid_t * out);
#endif

#if UUID_SUPPORT_v5
    void uuid5(uuid_t * out, uuid_t * ns, uint8_t * name_p, uint8_t len);
#endif

#endif